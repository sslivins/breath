name: Build ESP32-C6 Breath Firmware (Arduino CLI)

on:
  push:
    branches: [ main ] # Trigger only on pushes to the main branch
  pull_request:
    branches: [ main, master ] # Still build on pull requests for testing

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Arduino CLI
        uses: arduino/setup-arduino-cli@v2

      - name: Install ESP32 Board Platform
        run: |
          arduino-cli core update-index
          arduino-cli core install esp32:esp32

      - name: Enable unsafe library install
        run: arduino-cli config set library.enable_unsafe_install true          

      - name: Install Libraries
        run: |
          arduino-cli lib install "WiFiManager" "Sensirion I2C SCD4x" "PubSubClient" "ArduinoJson"  

      - name: Compile Sketch
        run: |
          arduino-cli compile \
          --fqbn esp32:esp32:adafruit_feather_esp32c6:CDCOnBoot=cdc \
          --warnings none \
          --build-path ./build \
          --build-property compiler.c.elf.extra_flags="-Wl,--gc-sections" \
          --verbose
        # --build-property build.extra_flags="-Wl,-S -Wl,--gc-sections"


      - name: Read version from config.h
        id: get_version
        run: |
          VERSION=$(grep -oP '#define\s+FW_VERSION\s+"\K[^"]+' config.h)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Rename firmware with version
        run: mv build/breath.ino.bin build/breath_${VERSION}.bin

      - name: Generate manifest.json
        run: |
          echo "{
            \"version\": \"${VERSION}\",
            \"bin_url\": \"https://github.com/${{ github.repository }}/releases/download/v${VERSION}/breath_${VERSION}.bin\"
          }" > build/manifest.json        

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/**

  release:
    if: github.ref == 'refs/heads/main' # Only run this job on the main branch
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Fail if tag already exists
        run: |
          TAG="v${{ needs.build.outputs.version }}"
          if gh release view "$TAG" --repo "${{ github.repository }}"; then
            echo "Release tag $TAG already exists. Failing the job."
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.build.outputs.version }}
          name: Release v${{ needs.build.outputs.version }}
          files: |
            build/breath_${{ needs.build.outputs.version }}.bin
            build/manifest.json
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}